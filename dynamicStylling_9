import React, { createContext, useContext, useReducer } from 'react';

// Authentication Context
const AuthContext = createContext();

// Action types
const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

// Reducer function
const authReducer = (state, action) => {
  switch (action.type) {
    case LOGIN:
      return { isLoggedIn: true };
    case LOGOUT:
      return { isLoggedIn: false };
    default:
      return state;
  }
};

// AuthProvider component
export const AuthProvider = ({ children }) => {
  const [authState, dispatch] = useReducer(authReducer, { isLoggedIn: false });

  const login = () => dispatch({ type: LOGIN });
  const logout = () => dispatch({ type: LOGOUT });

  return (
    <AuthContext.Provider value={{ isLoggedIn: authState.isLoggedIn, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Custom hook to use the AuthContext
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


// App.js

import React from 'react';
import { AuthProvider } from './AuthContext';
import LoginForm from './LoginForm';
import WelcomeBack from './WelcomeBack';

const App = () => {
  return (
    <AuthProvider>
      <MainContent />
    </AuthProvider>
  );
};

const MainContent = () => {
  const { isLoggedIn } = useAuth();

  return (
    <div>
      {isLoggedIn ? <WelcomeBack /> : <LoginForm />}
    </div>
  );
};

export default App;


// WelcomeBack.js

import React from 'react';
import { useAuth } from './AuthContext';

const WelcomeBack = () => {
  const { logout } = useAuth();

  const handleLogout = () => {
    logout();
  };

  return (
    <div>
      <h2>Welcome back!</h2>
      <button onClick={handleLogout}>Logout</button>
    </div>
  );
};

export default WelcomeBack;


// LoginForm.js

import React from 'react';
import { useAuth } from './AuthContext';

const LoginForm = () => {
  const { login } = useAuth();

  const handleLogin = () => {
    
    login();
  };

  return (
    <div>
      <h2>Login</h2>
      <button onClick={handleLogin}>Login</button>
    </div>
  );
};

export default LoginForm;
