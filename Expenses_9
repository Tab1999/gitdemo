import React, { useState , useEffect} from 'react';
import styles from './ExpenseForm.module.css';

const ExpenseForm = () => {
  const [moneySpent, setMoneySpent] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState('');
  const [expenses, setExpenses] = useState([]);

  useEffect(()=>{

    fetch('https://signup-fbdfd-default-rtdb.firebaseio.com/expenses.json')
    .then((response)=>{
        if(!response.ok){
            throw new Error('Failed to fetch expenses');
        }
        return response.json();
    })
    .then((data)=>{
        const fetchedExpenses =[];
        for(const key in data){
            fetchedExpenses.push({id: key, ...data[key]})
        }
        setExpenses(fetchedExpenses);
    })
    .catch((error)=>{
        console.error('Expense fetch error:' , error.message);
    })
  },[])



  const submitHandler = (e) => {
    e.preventDefault();

    // You can handle the form submission logic here
    console.log('Money Spent:', moneySpent);
    console.log('Description:', description);
    console.log('Category:', category);

    const formData = {
        moneySpent: +moneySpent, // Convert moneySpent to a number
        description,
        category,
      };
  
      // Make a POST request to the Firebase Realtime Database
      fetch('https://signup-fbdfd-default-rtdb.firebaseio.com/expenses.json', {
        method: 'POST',
        body: JSON.stringify(formData),
        headers: {
          'Content-Type': 'application/json',
        },
      })
      .then((response) => {
        if (!response.ok) {
          throw new Error('Data storage failed!');
        }
        return response.json();
      })
      .then((data) => {
        console.log('Data stored successfully:', data);
      })
      .catch((error) => {
        console.error('Data storage error:', error.message);
      });

    // You may want to reset the form fields after submission
    setMoneySpent('');
    setDescription('');
    setCategory('');
  };

  return (
    <div className={styles.expenseContainer}>
    <form className={styles.expenseForm} onSubmit={submitHandler}>
      <div className={styles.formControl}>
        <label htmlFor="moneySpent">Money Spent</label>
        <input
          type="number"
          id="moneySpent"
          value={moneySpent}
          onChange={(e) => setMoneySpent(e.target.value)}
          required
        />
      </div>
      <div className={styles.formControl}>
        <label htmlFor="description">Description</label>
        <input
          type="text"
          id="description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
          required
        />
      </div>
      <div className={styles.formControl}>
        <label htmlFor="category">Category</label>
        <select
          id="category"
          value={category}
          onChange={(e) => setCategory(e.target.value)}
          required
        >
          <option value="" disabled>
            Select a category
          </option>
          <option value="Food">Food</option>
          <option value="Petrol">Petrol</option>
          <option value="Salary">Salary</option>
          {/* Add more categories as needed */}
        </select>
      </div>
      <div className={styles.formActions}>
        <button type="submit">Submit</button>
      </div>
    </form>
     <div className={styles.expenseList}>
     <h2>Expense List</h2>
     {expenses.length === 0 && <p>No expenses yet.</p>}
     {expenses.map((expense) => (
       <div key={expense.id} className={styles.expenseItem}>
         <p>Money Spent: {expense.moneySpent}</p>
         <p>Description: {expense.description}</p>
         <p>Category: {expense.category}</p>
       </div>
     ))}
   </div>
   </div>
  );
};

export default ExpenseForm;
