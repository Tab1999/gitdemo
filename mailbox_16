// useMailApi.js
import { useState, useEffect } from 'react';
import { getDocs, collection, doc, updateDoc } from 'firebase/firestore';
import { useSelector, useDispatch } from 'react-redux';
import { mailAction } from '../store/mails';
import { db } from '../Firebase';
import { useHistory } from 'react-router-dom/cjs/react-router-dom.min';

const useMailApi = () => {
  const [receivedMails, setReceivedMails] = useState([]);
  const email = useSelector((state) => state.auth.email);
  const dispatch = useDispatch();
  const history = useHistory();

  useEffect(() => {
    const fetchReceivedMails = async () => {
      try {
        const queryData = await getDocs(collection(db, `mailboxes/${email}/inbox`));

        const mails = [];
        queryData.forEach((doc) => {
          mails.push({ id: doc.id, ...doc.data(), read: doc.data().read || false });
        });

        setReceivedMails(mails);
      } catch (error) {
        console.error('Error fetching received mails: ', error);
      }
    };

    fetchReceivedMails();
  }, [email]);

  const fetchNewMails = async () => {
    try {
      const queryData = await getDocs(collection(db, `mailboxes/${email}/inbox`));

      const mails = [];
      queryData.forEach((doc) => {
        mails.push({ id: doc.id, ...doc.data(), read: doc.data().read || false });
      });

      const newMails = mails.filter((mail) => !receivedMails.find((existingMail) => existingMail.id === mail.id));

      if (newMails.length > 0) {
        setReceivedMails((prevMails) => [...newMails, ...prevMails]);

        const newUnreadCount = countUnreadMails() + newMails.filter((mail) => !mail.read).length;
        dispatch(mailAction.updateUnreadCount(newUnreadCount));
      }
    } catch (error) {
      console.error('Error fetching new mails: ', error);
    }
  };

  useEffect(() => {
    const intervalId = setInterval(fetchNewMails, 2000);

    return () => clearInterval(intervalId);
  }, [email, receivedMails, dispatch]);

  const handleComposeClick = () => {
    // Implement your compose click logic here
    history.replace("./compose");
  };

  const handleMailClick = async (mail) => {
    // Implement your mail click logic here
    if (!mail.read) {
              // If the mail is unread, update the 'read' status in the database
              const mailDocRef = doc(db, `mailboxes/${email}/inbox`, mail.id);
              await updateDoc(mailDocRef, { read: true });
        
              // Update the local state to reflect the change
              const updatedReceivedMails = receivedMails.map((m) =>
                m.id === mail.id ? { ...m, read: true } : m
              );
              setReceivedMails(updatedReceivedMails);
        
              // Dispatch an action to update the unread count in Redux (if applicable)
              dispatch(mailAction.sendMail({
                id: mail.id,
                from: mail.from,
                subject: mail.subject,
                content: mail.content,
                read: true,
              }));
             
            }
        
            
            history.push(`/message/${mail.id}`);
  };

  const countUnreadMails = () => {
    return receivedMails.filter((mail) => !mail.read).length;
  };

  return {
    receivedMails,
    handleComposeClick,
    handleMailClick,
    countUnreadMails,
  };
};

export default useMailApi;
